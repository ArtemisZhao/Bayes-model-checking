betanewj = betaj+rnorm(1,0,sqrt(sd2[j]))
betanewjs<-c(betanewjs,betanewj)
}
if (test == "Q"){
q = sum((betanewjs - mean(betanewjs))^2 / (sd2 + phi2))
q_orig = sum((beta - mean(beta))^2 / (sd2 + phi2))
dist_list<- c(dist_list,q)
count = count + (q>q_orig)
##the difference
#dist=q-q_orig
#dist_list2<-c(dist_list2,dist)
}
if (test == "egger-hetero"){
y = betanewjs / sqrt(sd2 + phi2)
x = 1 / sqrt(sd2 + phi2)
a = abs(summary(lm(y ~ x))$coefficients[1,1])
dist_list = c(dist_list,a)
y_orig = beta / sqrt(sd2 + phi2)
x_orig = 1 / sqrt(sd2 + phi2)
com = abs(summary(lm(y_orig~x_orig))$coefficients[1,1])
count = count + (a>com)
}
###test statistics 2 skewness:
if (test=="skew"){
y = betanewjs / sqrt(sd2 + phi2)
x = 1 / sqrt(sd2 + phi2)
muhat = summary(lm(y ~ x))$coefficients[2,1]
dis = (betanewjs - muhat)/sqrt(sd2+phi2)
skew<-abs(skewness(dis))
dist_list = c(dist_list,skew)
y_orig = beta / sqrt(sd2 + phi2)
x_orig = 1 / sqrt(sd2 + phi2)
muhat = summary(lm(y_orig ~ x_orig))$coefficients[2,1]
dis = (beta - muhat)/sqrt(sd2+phi2)
com = abs(skewness(dis))
count=count+(skew>com)
}
if (test== "egger")
{ ### test statistics 3 egger regression:
y = betanewjs/sqrt(sd2)
x= 1/sqrt(sd2)
a = summary(lm(y ~ x))$coefficients[1,1]
dist_list = c(dist_list,abs(a))
}
if (test == "diff")
{ ###test statistics 1 naive:
###max mean difference
dist<-max(betanewjs)-mean(betanewjs)
dist_list<-c(dist_list,dist)
}
}
if (print_test_dist){
print(length(dist_list))
hist(dist_list)
}
if (test == "skew"){
return(count/L)
}
if (test == "egger-hetero"){
return(count/L)
}
if (test == "Q"){
return(count/L)
}
if (test == "egger"){
y = beta / sqrt(sd2)
x = 1 / sqrt(sd2)
com = abs(summary(lm(y~x))$coefficients[1,1])
}
if (test == "diff"){com = mean(beta)-min(beta)}
return( length(which(dist_list>com))/L)
}
rep_p<-sapply(1:1, function(x) bayes_posterior_check(beta=rep_data[x,],sd2=rep(1,10),test="diff",print_test_dist = T))
bayes_posterior_check<-function(beta,sd2,L=1000,r_vec = c(1e-5, 6e-3, 0.024),test="skew",print_test_dist=FALSE){
m<-length(beta)  ###number of replicates
chis1<-qchisq(c(0.25,0.5,0.75),df=1)
eta2_vec = c(min(beta)^2/chis1,mean(beta)^2/chis1)
#eta2_vec = c(1.0, 2.0, 4.0, 8.0)
######no p=1
#pv = c( 0.99, 0.975, 0.95)
rv = r_vec
make_grid <-function(eta2){
grid = sapply(rv, function(x)  c(eta2*(1-x), eta2*x))
return(t(grid))
}
grid = c()
for (i in 1:length(eta2_vec)){
grid = rbind(grid, make_grid(eta2_vec[i]))
}
omg2_list = grid[,1]
phi2_list = grid[,2]
wts<-c()
count=0
for (i in 1:length(omg2_list)){
omg2<-omg2_list[i]
phi2<-phi2_list[i]
Sigma<-matrix(omg2,ncol=m,nrow=m)+diag(c(sd2+phi2),nrow=m)
wtsi<-dmvnorm(beta, mean=rep(0,m), sigma=Sigma)
wts<-c(wts,wtsi)
}
wts<-wts/sum(wts)
simbeta<-c()
dist_list<-c()
dist_list2<-c()
for (t in 1:L){
k<-sample(1:length(omg2_list),1,prob=wts)
phi2<-phi2_list[k]
omg2<-omg2_list[k]
barbeta_pos_var<-1/(1/omg2+sum(1/(sd2+phi2)))
barbeta_pos_mean<-barbeta_pos_var*sum(beta/(sd2+phi2))
barbeta<-rnorm(1,barbeta_pos_mean,sqrt(barbeta_pos_var))
betanewjs<-c()
tnewjs<-c()
for (j in 1:m){
#print(c(i,j))
betaj_var<-1/(1/phi2+1/sd2[j])
betaj_mean<-betaj_var*(barbeta/phi2+beta[j]/sd2[j])
betaj<-rnorm(1,betaj_mean,sqrt(betaj_var))
#print(betaj)
betanewj = betaj+rnorm(1,0,sqrt(sd2[j]))
betanewjs<-c(betanewjs,betanewj)
}
if (test == "Q"){
q = sum((betanewjs - mean(betanewjs))^2 / (sd2 + phi2))
q_orig = sum((beta - mean(beta))^2 / (sd2 + phi2))
dist_list<- c(dist_list,q)
count = count + (q>q_orig)
##the difference
#dist=q-q_orig
#dist_list2<-c(dist_list2,dist)
}
if (test == "egger-hetero"){
y = betanewjs / sqrt(sd2 + phi2)
x = 1 / sqrt(sd2 + phi2)
a = abs(summary(lm(y ~ x))$coefficients[1,1])
dist_list = c(dist_list,a)
y_orig = beta / sqrt(sd2 + phi2)
x_orig = 1 / sqrt(sd2 + phi2)
com = abs(summary(lm(y_orig~x_orig))$coefficients[1,1])
count = count + (a>com)
}
###test statistics 2 skewness:
if (test=="skew"){
y = betanewjs / sqrt(sd2 + phi2)
x = 1 / sqrt(sd2 + phi2)
muhat = summary(lm(y ~ x))$coefficients[2,1]
dis = (betanewjs - muhat)/sqrt(sd2+phi2)
skew<-abs(skewness(dis))
dist_list = c(dist_list,skew)
y_orig = beta / sqrt(sd2 + phi2)
x_orig = 1 / sqrt(sd2 + phi2)
muhat = summary(lm(y_orig ~ x_orig))$coefficients[2,1]
dis = (beta - muhat)/sqrt(sd2+phi2)
com = abs(skewness(dis))
count=count+(skew>com)
}
if (test== "egger")
{ ### test statistics 3 egger regression:
y = betanewjs/sqrt(sd2)
x= 1/sqrt(sd2)
a = summary(lm(y ~ x))$coefficients[1,1]
dist_list = c(dist_list,abs(a))
}
if (test == "diff")
{ ###test statistics 1 naive:
###max mean difference
dist<-max(betanewjs)-mean(betanewjs)
dist_list<-c(dist_list,dist)
}
}
if (print_test_dist){
print(length(dist_list))
hist(dist_list)
}
if (test == "skew"){
return(count/L)
}
if (test == "egger-hetero"){
return(count/L)
}
if (test == "Q"){
return(count/L)
}
if (test == "egger"){
y = beta / sqrt(sd2)
x = 1 / sqrt(sd2)
com = abs(summary(lm(y~x))$coefficients[1,1])
}
if (test == "diff"){
com = mean(beta)-min(beta)
print(com)}
return( length(which(dist_list>com))/L)
}
rep_p<-sapply(1:1, function(x) bayes_posterior_check(beta=rep_data[x,],sd2=rep(1,10),test="diff",print_test_dist = T))
rep_p
bayespval_beta_meta<-function(beta,sd,r_vec = c(0, 1e-5, 6e-3, 0.024),test="twoside"){
beta_o<-beta[1]
beta_r<-beta[2]
sigma_o<-sd[1]^2
sigma_r<-sd[2]^2
####old grid
#eta2_vec = c(sigma_o)
#eta2 = 2*sigma_o
#while(eta2<= beta_o^2 + sigma_o){
#  eta2_vec = c(eta2_vec, eta2)
#  eta2 = 2*eta2
#}
####new grid
chis1<-qchisq(c(0.25,0.5,0.75),df=1)
eta2_vec = beta_o^2/chis1
#pv = c(1.0, 0.99, 0.975, 0.95)
rv = r_vec
make_grid <-function(eta2){
grid = sapply(rv, function(x)  c(eta2*(1-x), eta2*x))
return(t(grid))
}
grid = c()
for (i in 1:length(eta2_vec)){
grid = rbind(grid, make_grid(eta2_vec[i]))
}
omg2 = grid[,1]
phi2 = grid[,2]
mean<-sapply(1:length(omg2),function(x)
beta_o/(sigma_o/omg2[x]+phi2[x]/omg2[x]+1))
var<-sapply(1:length(omg2),function(x)
(sigma_o+phi2[x])*omg2[x]/(sigma_o+phi2[x]+omg2[x])+phi2[x]+sigma_r)
pval<-sapply(1:length(mean),function(x) pnorm(beta_r, mean=mean[x],sd=sqrt(var[x])))
wts = dnorm(beta_o, mean=0, sd=sqrt(omg2+sigma_o+phi2))
wts = wts/sum(wts)
pval_wt<-wts%*%pval
if (test=="pub"){
if (beta_o>0){
return(mean(pval))}
if (beta_o<0){
return(1-mean(pval))
}
}
else{
return(2*min(pval_wt,1-pval_wt))
}
#return(pval_wt)
}
beta1<-rep(1,1000)
x1<-rep(c(0:1),each=20)
#x2<-rep(c(0:1),each=200)
#x3<-rep(c(0:1),each=200)
xsmall<-rep(c(0:1),each=20)
# simulate two studies: first without batch effects second with batch effects
Y1<-sapply(1:length(beta1), function(i) x1*beta1[i]+rnorm(40,0,1))
Ysmall<-sapply(1:length(beta1), function(i) xsmall*beta1[i]+rnorm(40,0,2))
# Estimation
est1<-t(sapply(1:ncol(Y1),function(j)
summary(lm(Y1[,j]~x1))$coefficient[2,]))
#est2<-t(sapply(1:ncol(Y2),function(j)
#summary(lm(Y2[,j]~x2))$coefficient[2,]))
#est3<-t(sapply(1:ncol(Y3),function(j)
#summary(lm(Y3[,j]~x3))$coefficient[2,]))
estnoisy<-t(sapply(1:ncol(Ysmall),function(j)
summary(lm(Ysmall[,j]~xsmall))$coefficient[2,]))
data_nobatch_vs_noisy<-cbind(est1[,c(1,2)],estnoisy[,c(1,2)])
#data_mul<-data.frame(cbind(est1[,c(1,2)],est2[,c(1,2)],est3[,c(1,2)],estbatch[,c(1,2)]))
pval_noisy<-sapply(1:nrow(data_nobatch_vs_noisy),function(x) bayespval_beta_meta(beta=data_nobatch_vs_noisy[x,c(1,3)],sd=data_nobatch_vs_noisy[x,c(2,4)]))
hist(pval_noisy)
#data_mul<-data.frame(cbind(est1[,c(1,2)],est2[,c(1,2)],est3[,c(1,2)],estbatch[,c(1,2)]))
pval_noisy<-sapply(1:nrow(data_nobatch_vs_noisy),function(x) bayespval_beta_meta(beta=data_nobatch_vs_noisy[x,c(1,3)],sd=data_nobatch_vs_noisy[x,c(2,4)],r_vec = 0))
hist(pval_noisy)
pval_noisy_list<-c()
pval_batch_list<-c()
#post_noisy_list<-c()
#post_batch_list<-c()
sdlist=seq(0.1,1,0.1)
for (i in 1:length(sdlist)){
sd<-sdlist[i]
beta1<-rep(1,1000)
x1<-rep(c(0:1),each=20)
#x2<-rep(c(0:1),each=200)
#x3<-rep(c(0:1),each=200)
xsmall<-rep(c(0:1),each=20)
batchlabel0<-c(rep(1,4),rep(0,16))
batchlabel1<-c(rep(1,16),rep(0,4))
batchlabels<-c(batchlabel0,batchlabel1)
# small batch effect
batcheffect<-c(rnorm(1000,0,sd)) ###rep(sd,1000)
# simulate two studies: first without batch effects second with batch effects
Y1<-sapply(1:length(beta1), function(i) x1*beta1[i]+rnorm(40,0,1))
#Y2<-sapply(1:length(beta1), function(i) x2*beta1[i]+rnorm(400))
#Y3<-sapply(1:length(beta1), function(i) x3*beta1[i]+rnorm(400))
Ysmall<-sapply(1:length(beta1), function(i) xsmall*beta1[i]+rnorm(40,0,2))
Ybatch<-sapply(1:length(beta1), function(i)
x1*beta1[i]+batchlabels*batcheffect[i]+rnorm(40,0,1))
# Estimation
est1<-t(sapply(1:ncol(Y1),function(j)
summary(lm(Y1[,j]~x1))$coefficient[2,]))
#est2<-t(sapply(1:ncol(Y2),function(j)
#summary(lm(Y2[,j]~x2))$coefficient[2,]))
#est3<-t(sapply(1:ncol(Y3),function(j)
#summary(lm(Y3[,j]~x3))$coefficient[2,]))
estnoisy<-t(sapply(1:ncol(Ysmall),function(j)
summary(lm(Ysmall[,j]~xsmall))$coefficient[2,]))
estbatch<-t(sapply(1:ncol(Ybatch),function(j)
summary(lm(Ybatch[,j]~x1))$coefficient[2,]))
data_nobatch_vs_noisy<-cbind(est1[,c(1,2)],estnoisy[,c(1,2)])
data_nobatch_vs_batch<-cbind(est1[,c(1,2)],estbatch[,c(1,2)])
#data_mul<-data.frame(cbind(est1[,c(1,2)],est2[,c(1,2)],est3[,c(1,2)],estbatch[,c(1,2)]))
pval_noisy<-sapply(1:nrow(data_nobatch_vs_noisy),function(x) bayespval_beta_meta(beta=data_nobatch_vs_noisy[x,c(1,3)],sd=data_nobatch_vs_noisy[x,c(2,4)]))
pval_batch<-sapply(1:nrow(data_nobatch_vs_batch),function(x) bayespval_beta_meta(beta=data_nobatch_vs_batch[x,c(1,3)],sd=data_nobatch_vs_batch[x,c(2,4)]))
#post_noisy<-sapply(1:nrow(data_nobatch_vs_noisy),function(x) bayes_posterior_check(data=data_nobatch_vs_noisy[x,],L=500))
#post_batch<-sapply(1:nrow(data_mul),function(x) bayes_posterior_check(data=data_mul[x,],L=500))
pval_noisy_list<-c(pval_noisy_list,pval_noisy)
pval_batch_list<-cbind(pval_batch_list,pval_batch)
#post_noisy_list<-c(post_noisy_list,post_noisy)
#post_batch_list<-cbind(post_batch_list,post_batch)
}
library(ggplot2)
pval_noisy_list<-data.frame(replication_pval=pval_noisy_list)
gp1<-ggplot(pval_noisy_list,aes(x=replication_pval))+geom_histogram(color="black",fill="white",breaks=seq(0,1,0.1))+theme_bw()
gp1
pval_batch_02<-data.frame(replication_pval=pval_batch_list[,2])
p1<-ggplot(pval_batch_02,aes(x=replication_pval))+geom_histogram(color="black",fill="white")
pval_batch_03<-data.frame(replication_pval=pval_batch_list[,3])
p2<-ggplot(pval_batch_03,aes(x=replication_pval))+geom_histogram(color="black",fill="white")
pval_batch_04<-data.frame(replication_pval=pval_batch_list[,4])
p3<-ggplot(pval_batch_04,aes(x=replication_pval))+geom_histogram(color="black",fill="white")
pval_batch_08<-data.frame(replication_pval=pval_batch_list[,6])
p4<-ggplot(pval_batch_08,aes(x=replication_pval))+geom_histogram(color="black",fill="white")
ggarrange(p1,p2,p3,p4,ncol=2,labels=c("eta=0.2","eta=0.3","eta=0.4","eta=0.6"),
label.args = list(gp = grid::gpar(font = 2, cex =0.8)))
library(egg)
ggarrange(p1,p2,p3,p4,ncol=2,labels=c("eta=0.2","eta=0.3","eta=0.4","eta=0.6"),
label.args = list(gp = grid::gpar(font = 2, cex =0.8)))
pval_batch_list<-c()
sdlist=c(0.5,1,1.5, 2)
for (i in 1:length(sdlist)){
sd<-sdlist[i]
beta1<-rep(1,1000)
x<-rep(c(0:1),each=20)
#xsmall<-rep(c(0:1),each=20)
batchlabel0<-c(rep(1,4),rep(0,16))
batchlabel1<-c(rep(1,16),rep(0,4))
batchlabels<-c(batchlabel0,batchlabel1)
# small batch effect
batcheffect<-c(rnorm(1000,0,0.4))
# simulate two studies: first without batch effects second with batch effects
Y<-sapply(1:length(beta1), function(i) x*beta1[i]+rnorm(40))
#Ysmall<-sapply(1:length(beta1), function(i) xsmall*beta1[i]+rnorm(40))
Ybatch<-sapply(1:length(beta1), function(i)
x*beta1[i]+batchlabels*batcheffect[i]+rnorm(40,0,sd))
# Estimation
est<-t(sapply(1:ncol(Y),function(j)
summary(lm(Y[,j]~x))$coefficient[2,]))
#estnoisy<-t(sapply(1:ncol(Ysmall),function(j)
# summary(lm(Ysmall[,j]~xsmall))$coefficient[2,]))
estbatch<-t(sapply(1:ncol(Ybatch),function(j)
summary(lm(Ybatch[,j]~x))$coefficient[2,]))
#data_nobatch_vs_noisy<-data.frame(cbind(est[,c(1,2)],estnoisy[,c(1,2)]))
data_nobatch_vs_batch<-data.frame(cbind(est[,c(1,2)],estbatch[,c(1,2)]))
#pval_noisy<-sapply(1:nrow(data_nobatch_vs_noisy),function(x) bayespval_beta_meta(data=data_nobatch_vs_noisy[x,]))
pval_batch<-sapply(1:nrow(data_nobatch_vs_batch),function(x) bayespval_beta_meta(data=data_nobatch_vs_batch[x,]))
#  pval_noisy_list<-c(pval_noisy_list,pval_noisy)
pval_batch_list<-cbind(pval_batch_list,pval_batch)
}
pval_batch_list<-c()
sdlist=c(0.5,1,1.5, 2)
for (i in 1:length(sdlist)){
sd<-sdlist[i]
beta1<-rep(1,1000)
x<-rep(c(0:1),each=20)
#xsmall<-rep(c(0:1),each=20)
batchlabel0<-c(rep(1,4),rep(0,16))
batchlabel1<-c(rep(1,16),rep(0,4))
batchlabels<-c(batchlabel0,batchlabel1)
# small batch effect
batcheffect<-c(rnorm(1000,0,0.4))
# simulate two studies: first without batch effects second with batch effects
Y<-sapply(1:length(beta1), function(i) x*beta1[i]+rnorm(40))
#Ysmall<-sapply(1:length(beta1), function(i) xsmall*beta1[i]+rnorm(40))
Ybatch<-sapply(1:length(beta1), function(i)
x*beta1[i]+batchlabels*batcheffect[i]+rnorm(40,0,sd))
# Estimation
est<-t(sapply(1:ncol(Y),function(j)
summary(lm(Y[,j]~x))$coefficient[2,]))
#estnoisy<-t(sapply(1:ncol(Ysmall),function(j)
# summary(lm(Ysmall[,j]~xsmall))$coefficient[2,]))
estbatch<-t(sapply(1:ncol(Ybatch),function(j)
summary(lm(Ybatch[,j]~x))$coefficient[2,]))
#data_nobatch_vs_noisy<-data.frame(cbind(est[,c(1,2)],estnoisy[,c(1,2)]))
data_nobatch_vs_batch<-data.frame(cbind(est[,c(1,2)],estbatch[,c(1,2)]))
#pval_noisy<-sapply(1:nrow(data_nobatch_vs_noisy),function(x) bayespval_beta_meta(data=data_nobatch_vs_noisy[x,]))
pval_batch<-sapply(1:nrow(data_nobatch_vs_batch),function(x) bayespval_beta_meta(beta=data_nobatch_vs_batch[x,c(1,3)],sd=data_nobatch_vs_batch[x,c(2,4)]))
#  pval_noisy_list<-c(pval_noisy_list,pval_noisy)
pval_batch_list<-cbind(pval_batch_list,pval_batch)
}
pval_batch_list<-c()
sdlist=c(0.5,1,1.5, 2)
for (i in 1:length(sdlist)){
sd<-sdlist[i]
beta1<-rep(1,1000)
x<-rep(c(0:1),each=20)
#xsmall<-rep(c(0:1),each=20)
batchlabel0<-c(rep(1,4),rep(0,16))
batchlabel1<-c(rep(1,16),rep(0,4))
batchlabels<-c(batchlabel0,batchlabel1)
# small batch effect
batcheffect<-c(rnorm(1000,0,0.4))
# simulate two studies: first without batch effects second with batch effects
Y<-sapply(1:length(beta1), function(i) x*beta1[i]+rnorm(40))
#Ysmall<-sapply(1:length(beta1), function(i) xsmall*beta1[i]+rnorm(40))
Ybatch<-sapply(1:length(beta1), function(i)
x*beta1[i]+batchlabels*batcheffect[i]+rnorm(40,0,sd))
# Estimation
est<-t(sapply(1:ncol(Y),function(j)
summary(lm(Y[,j]~x))$coefficient[2,]))
#estnoisy<-t(sapply(1:ncol(Ysmall),function(j)
# summary(lm(Ysmall[,j]~xsmall))$coefficient[2,]))
estbatch<-t(sapply(1:ncol(Ybatch),function(j)
summary(lm(Ybatch[,j]~x))$coefficient[2,]))
#data_nobatch_vs_noisy<-data.frame(cbind(est[,c(1,2)],estnoisy[,c(1,2)]))
data_nobatch_vs_batch<-data.frame(cbind(est[,c(1,2)],estbatch[,c(1,2)]))
#pval_noisy<-sapply(1:nrow(data_nobatch_vs_noisy),function(x) bayespval_beta_meta(data=data_nobatch_vs_noisy[x,]))
pval_batch<-sapply(1:nrow(data_nobatch_vs_batch),function(x) bayespval_beta_meta(beta=data_nobatch_vs_batch[x,c(1,3)],sd=data_nobatch_vs_batch[x,c(2,4)]))
#  pval_noisy_list<-c(pval_noisy_list,pval_noisy)
pval_batch_list<-cbind(pval_batch_list,pval_batch)
}
pval_batch_list<-c()
sdlist=c(0.5,1,1.5, 2)
for (i in 1:length(sdlist)){
sd<-sdlist[i]
beta1<-rep(1,1000)
x<-rep(c(0:1),each=20)
#xsmall<-rep(c(0:1),each=20)
batchlabel0<-c(rep(1,4),rep(0,16))
batchlabel1<-c(rep(1,16),rep(0,4))
batchlabels<-c(batchlabel0,batchlabel1)
# small batch effect
batcheffect<-c(rnorm(1000,0,0.4))
# simulate two studies: first without batch effects second with batch effects
Y<-sapply(1:length(beta1), function(i) x*beta1[i]+rnorm(40))
#Ysmall<-sapply(1:length(beta1), function(i) xsmall*beta1[i]+rnorm(40))
Ybatch<-sapply(1:length(beta1), function(i)
x*beta1[i]+batchlabels*batcheffect[i]+rnorm(40,0,sd))
# Estimation
est<-t(sapply(1:ncol(Y),function(j)
summary(lm(Y[,j]~x))$coefficient[2,]))
#estnoisy<-t(sapply(1:ncol(Ysmall),function(j)
# summary(lm(Ysmall[,j]~xsmall))$coefficient[2,]))
estbatch<-t(sapply(1:ncol(Ybatch),function(j)
summary(lm(Ybatch[,j]~x))$coefficient[2,]))
#data_nobatch_vs_noisy<-data.frame(cbind(est[,c(1,2)],estnoisy[,c(1,2)]))
data_nobatch_vs_batch<-cbind(est[,c(1,2)],estbatch[,c(1,2)])
#pval_noisy<-sapply(1:nrow(data_nobatch_vs_noisy),function(x) bayespval_beta_meta(data=data_nobatch_vs_noisy[x,]))
pval_batch<-sapply(1:nrow(data_nobatch_vs_batch),function(x) bayespval_beta_meta(beta=data_nobatch_vs_batch[x,c(1,3)],sd=data_nobatch_vs_batch[x,c(2,4)]))
#  pval_noisy_list<-c(pval_noisy_list,pval_noisy)
pval_batch_list<-cbind(pval_batch_list,pval_batch)
}
pval_batch_01<-data.frame(replication_pval=pval_batch_list[,1])
p1<-ggplot(pval_batch_01,aes(x=replication_pval))+geom_histogram(color="black",fill="white")
pval_batch_02<-data.frame(replication_pval=pval_batch_list[,2])
p2<-ggplot(pval_batch_02,aes(x=replication_pval))+geom_histogram(color="black",fill="white")
pval_batch_03<-data.frame(replication_pval=pval_batch_list[,3])
p3<-ggplot(pval_batch_03,aes(x=replication_pval))+geom_histogram(color="black",fill="white")
pval_batch_04<-data.frame(replication_pval=pval_batch_list[,4])
p4<-ggplot(pval_batch_04,aes(x=replication_pval))+geom_histogram(color="black",fill="white")
ggarrange(p1,p2,p3,p4,ncol=2,labels=c("sd=0.5","sd=1","sd=1.5","sd=2"),
label.args = list(gp = grid::gpar(font = 2, cex =0.8)))
bayespval_beta_meta<-function(beta,sd,r_vec = c(0, 1e-5, 6e-3, 0.024),test="twoside"){
beta_o<-beta[1]
beta_r<-beta[2]
sigma_o<-sd[1]
sigma_r<-sd[2]
####old grid
#eta2_vec = c(sigma_o)
#eta2 = 2*sigma_o
#while(eta2<= beta_o^2 + sigma_o){
#  eta2_vec = c(eta2_vec, eta2)
#  eta2 = 2*eta2
#}
####new grid
chis1<-qchisq(c(0.25,0.5,0.75),df=1)
eta2_vec = beta_o^2/chis1
#pv = c(1.0, 0.99, 0.975, 0.95)
rv = r_vec
make_grid <-function(eta2){
grid = sapply(rv, function(x)  c(eta2*(1-x), eta2*x))
return(t(grid))
}
grid = c()
for (i in 1:length(eta2_vec)){
grid = rbind(grid, make_grid(eta2_vec[i]))
}
omg2 = grid[,1]
phi2 = grid[,2]
mean<-sapply(1:length(omg2),function(x)
beta_o/(sigma_o/omg2[x]+phi2[x]/omg2[x]+1))
var<-sapply(1:length(omg2),function(x)
(sigma_o+phi2[x])*omg2[x]/(sigma_o+phi2[x]+omg2[x])+phi2[x]+sigma_r)
pval<-sapply(1:length(mean),function(x) pnorm(beta_r, mean=mean[x],sd=sqrt(var[x])))
wts = dnorm(beta_o, mean=0, sd=sqrt(omg2+sigma_o+phi2))
wts = wts/sum(wts)
pval_wt<-wts%*%pval
if (test=="pub"){
if (beta_o>0){
return(mean(pval))}
if (beta_o<0){
return(1-mean(pval))
}
}
else{
return(2*min(pval_wt,1-pval_wt))
}
#return(pval_wt)
}
setwd("~/Desktop/rep_new/bayes-model-checking")
